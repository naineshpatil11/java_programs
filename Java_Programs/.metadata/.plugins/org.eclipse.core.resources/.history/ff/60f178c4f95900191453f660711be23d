/*
 * Purpose: Utility class include the to chech the prime number,

 *          to check the anagram number,prime anagram number.
 * @author: Nainesh R Patil.
 * 
 */
package com.bridgelabz.datastructure;

import java.util.Arrays;
import java.util.Scanner;

public class Utility 
{
	public static int hashFunction(int n) 
	{
		int rem=n%11;
		return rem;
	}
	
	//to check number is prime or not
	public static boolean isPrime(int n)
	{
		//for(int i=0;i<n;i++)
		//return false;
		
	//	int n ;
	/*	if (n <= 1)  
		{  
			return false;  
		} 
		for(int i1 = 2; i1 <= n/2; i1++)
	     {
			
			//int rem = ;
			boolean flag = false;
			
			if(n % i1 == 0)
			{
				return true;
				//break;
			}
			if(flag == false)
				return true;
			else
			   flag = false;
	     }
		return true;*/
		
		{
			if (n <= 1)  //e.g n=15
			{  
				return false;  
			} 
			for(int i=2; i<=n/2; i++)
		     {
	 
				int rem=n%i;
				if(rem==0)
				{
					return false;
				}
				
		}
			return true;
		}
	}
	
	//to check no is prime or not in bet range
	public static int[] PrimeNumber(int range) 
	{
		boolean isPrime = true;
		int count = 0;
		int primeno[] = new int[range];		   
		for (int i = 0; i <= range; i++)         
		{ 		  
			for(int j = 2; j<i ;j++)
			{
				if(i%j == 0)
				{
					isPrime = false;
					break;
				}
				else 	
					isPrime = true;
			}
			if(isPrime == true)
				primeno[count++] = i;
		}
		return primeno ;		     
	}
	
	//to represent the range
	static Scanner sc=new Scanner(System.in);
	public static int[][] firstNPrimes() 
	
	{
		int prime[][]=new int[10][25];
		
			int f1=0, f2=0, f3=0, f4=0, f5=0, f6=0, f7=0, f8=0, f9=0, f10=0;
			for(int i=2; i<=1000; i++)
			{
				boolean pm=isPrime(i);	
				if(pm)
				{
					if(i<100)
					{
						
						prime[0][f1]=i;
						f1++;
					}
					else if(i<200)
					{
						prime[1][f2]=i;
						f2++;
					}
					else if(i<300)
					{
						prime[2][f3]=i;
						f3++;
					}
					else if(i<400)
					{
						prime[3][f4]=i;
						f4++;
					}
					else if(i<500)
					{
						prime[4][f5]=i;
						f5++;
					}
					else if(i<600)
					{
						prime[5][f6]=i;
						f6++;
					}
					else if(i<700)
					{
						prime[6][f7]=i;
						f7++;
					}
					else if(i<800)
					{
						prime[7][f8]=i;
						f8++;
					}
					else if(i<900)
					{
						prime[8][f9]=i;
						f9++;
					}
					else
					{
						prime[9][f10]=i;
						f10++;
					}
				}
			
			}
			return prime;
	  }

	public static int[] checkAnagram(int[] primeno)
	{
		
		System.out.println("\nThe prime number which are Anagram:");
		int anagram = 0;
		int[] anagramArray = new int[primeno.length]; 
		for (int  i = 0; i < primeno.length; i++)
		{
			for (int j = 0; j < primeno.length; j++)
			{
				if(primeno[i]>0 && primeno[j]>0 && primeno[i]!=primeno[j])
				{     
					String string1 = Integer.toString(primeno[i]);
					String string2 = Integer.toString(primeno[j]);
					anagram=checkPrimeAnagram(string1, string2);
					if(anagram>0)
					{
						anagramArray[i] = anagram;
					}
				}
			}
		}
		return anagramArray;				        
	}
	
	public static void twoDPrimeAnagram(int[] anagram) 
	{
		int row = 20 ,column = 26;
		int[][] anagramArray = new int[row][column];
		int temp = 100 , k=0;
		for(int i = 0 ;i<row; i++)
		{
			for(int j= 0 ; j<column ; j++)
			{
				if(k<anagram.length )
				{
					if(anagram[k] <= temp )
					{
						anagramArray[i][j] = anagram[k];
						k = k+1;
					}
				} 
			} 	
			temp = temp + 100;
		}

		System.out.println("");
		for(int i = 0 ;i<row ; i++)
		{
			for(int j= 0 ; j<column ; j++)
			{
				if(anagram[j]>0)
				{
					//printing prime anagram numbers in 2D array
					if(anagramArray[i][j] != 0)
					{
						System.out.print(anagramArray[i][j]+"\t");
					}
				}
			}
			System.out.println();
		}		
	}
	
	private static int checkPrimeAnagram(String string1, String string2)
	{
		int anagram =0 ;
		char[] ch1 = string1.toCharArray();
		char[] ch2 = string2.toCharArray();
		boolean result=false;
		Arrays.sort(ch1);
		Arrays.sort(ch2);
		result = Arrays.equals(ch1,ch2);
		if(result==true)
		{
			anagram = Integer.parseInt(string1);
			 
			return anagram;
		}
		return anagram;		
	}

	//to get palindrome of number
	public static int anagram(int n)
	{
			int rem,sum=0;
			while(n>0)
			{
				rem = n%10;
				sum=(sum*10)+rem;
				n=n/10;
			}
			return sum;
	}
}